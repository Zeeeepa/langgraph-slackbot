name: Requirements to Code

on:
  push:
    paths:
      - 'REQUIREMENTStodo/REQUIREMENTStodo.md'
    branches:
      - main

jobs:
  process-requirements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests slack_sdk

      - name: Analyze requirements and update progress
        id: analyze
        run: |
          # Read the REQUIREMENTStodo.md file
          REQUIREMENTS=$(cat REQUIREMENTStodo/REQUIREMENTStodo.md)
          
          # Extract requirements from the Current Requirements section
          python -c '
          import re
          import os
          from datetime import datetime
          
          with open("REQUIREMENTStodo/REQUIREMENTStodo.md", "r") as f:
              content = f.read()
          
          # Find the Current Requirements section
          requirements_section = re.search(r"## Current Requirements\s*\n(.*?)(?:\n##|\Z)", content, re.DOTALL)
          if requirements_section:
              requirements_text = requirements_section.group(1)
              # Extract numbered requirements
              requirements = re.findall(r"^\d+\.\s*(.*?)$", requirements_text, re.MULTILINE)
              
              # Update the progress tracking file
              with open("CODEGEN_PROGRESS.md", "r") as f:
                  progress_content = f.readlines()
              
              # Extract existing requirements from progress file
              existing_reqs = {}
              for i, line in enumerate(progress_content):
                  if i > 2 and line.startswith("|"):  # Skip header rows
                      parts = line.split("|")
                      if len(parts) > 2:
                          req = parts[1].strip()
                          status = parts[2].strip()
                          existing_reqs[req] = (i, status)
              
              # Update or add requirements
              for req in requirements:
                  if req in existing_reqs:
                      # Requirement exists, update the date
                      line_idx, status = existing_reqs[req]
                      parts = progress_content[line_idx].split("|")
                      parts[3] = f" {datetime.now().strftime(\"%Y-%m-%d\")} "
                      progress_content[line_idx] = "|".join(parts)
                  else:
                      # New requirement, add it
                      progress_content.append(f"| {req} | Not Started | {datetime.now().strftime(\"%Y-%m-%d\")} |\n")
              
              # Write updated progress file
              with open("CODEGEN_PROGRESS.md", "w") as f:
                  f.writelines(progress_content)
          '
          
          # Add timestamp to the requirements file
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          echo "Last processed: $TIMESTAMP" >> REQUIREMENTStodo/REQUIREMENTStodo.md

      - name: Send notification to Slack
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          python -c '
          import os
          import json
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          
          client = WebClient(token=os.environ["SLACK_BOT_TOKEN"])
          
          # Read the first few lines of REQUIREMENTStodo.md for context
          with open("REQUIREMENTStodo/REQUIREMENTStodo.md", "r") as f:
              requirements_preview = "".join(f.readlines()[:10])
          
          message = {
              "channel": os.environ["SLACK_CHANNEL_ID"],
              "text": "Requirements Processing Complete",
              "blocks": [
                  {
                      "type": "header",
                      "text": {
                          "type": "plain_text",
                          "text": "ðŸ¤– Requirements Processing Complete"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "Requirements have been processed and progress tracking has been updated."
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": f"Requirements Preview:\n```{requirements_preview}```"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "Would you like me to generate code based on these requirements?"
                      }
                  },
                  {
                      "type": "actions",
                      "elements": [
                          {
                              "type": "button",
                              "text": {
                                  "type": "plain_text",
                                  "text": "Generate Code"
                              },
                              "style": "primary",
                              "value": "generate_code",
                              "action_id": "generate_code"
                          },
                          {
                              "type": "button",
                              "text": {
                                  "type": "plain_text",
                                  "text": "Review Requirements First"
                              },
                              "value": "review_requirements",
                              "action_id": "review_requirements"
                          }
                      ]
                  }
              ]
          }
          
          try:
              response = client.chat_postMessage(**message)
              print(f"Message sent: {response.data}")
          except SlackApiError as e:
              print(f"Error sending message: {e.response[\"error\"]}")
          '

  generate-code:
    needs: process-requirements
    runs-on: ubuntu-latest
    if: false  # This job is not automatically triggered, but would be triggered by a Slack interaction
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests slack_sdk

      - name: Generate code based on requirements
        run: |
          # This is where you would integrate with your AI code generation system
          echo "Generating code based on requirements..."

      - name: Create Pull Request with generated code
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto-generated code from requirements"
          title: "Auto-generated code from requirements"
          body: |
            This PR contains auto-generated code based on the requirements in REQUIREMENTStodo.md.
            Please review the changes and make any necessary adjustments.
          branch: auto-generated-code
          base: main
